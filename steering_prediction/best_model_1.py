# -*- coding: utf-8 -*-
"""Best_Model_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/saireddyavs/Self-Driving-Cars-Using-Keras/blob/master/Best_Model_1.ipynb
"""

import scipy.misc
import random

train_batch_pointer=0

validation_batch_pointer=0

from itertools import islice

images=[]

angles=[]

from scipy import pi

txt=open("driving_dataset/driving_dataset/data.txt")
num_lines=sum(1 for line in open("driving_dataset/driving_dataset/data.txt"))
lines_slice=islice(txt,num_lines)

for line in lines_slice:
	image,angle=line.strip().split()
	images.append("driving_dataset/driving_dataset/"+image)
	angle=float(angle)*scipy.pi/180
	angles.append(angle)

#time based split
split_ratio=0.8
split_up_to=int(num_lines*split_ratio)
print(split_up_to)
train_images=images[:split_up_to]
train_angles=angles[:split_up_to]

validation_images=images[split_up_to:]
validation_angles=angles[split_up_to:]

num_train_images=len(train_images)
num_validation_images=len(validation_images)
print(num_train_images,num_validation_images)

train_ang=[]
import datetime  as dt
start=dt.datetime.now()
for i in range(0,36324):
    train_ang.append([train_angles[i]])

print("time took:",dt.datetime.now()-start)



val_im=[]

import datetime  as dt
start=dt.datetime.now()
for i in range(0,9082):
    val_im.append(scipy.misc.imresize(scipy.misc.imread(validation_images[ i ])[-150:], [66, 200]) / 255.0)
print("time took:",dt.datetime.now()-start)



val_ang=[]
import datetime  as dt
start=dt.datetime.now()
for i in range(0,9082):
    val_ang.append([validation_angles[i]])

print("time took:",dt.datetime.now()-start)


train_im=[]
import datetime  as dt
start=dt.datetime.now()
for i in range(0,36324):
    train_im.append(scipy.misc.imresize(scipy.misc.imread(train_images[ i ])[-150:], [66, 200]) / 255.0)

print("time took:",dt.datetime.now()-start)


start = dt.datetime.now()

import numpy as np
train_im=np.array(train_im)
val_im=np.array(val_im)
val_ang=np.array(val_ang)
train_ang=np.array(train_ang)

print("time took::",dt.datetime.now()-start)

from keras.models import Sequential
from keras.layers import Dense,Flatten,Dropout,Conv2D
from keras import backend as k
from keras.initializers import TruncatedNormal,Constant
model = Sequential()

model.add(Conv2D(24, (5,5), strides=(2,2), activation="relu",input_shape = (66,200,3) ))
model.add(Conv2D(36, (5,5), strides=(2,2), activation="relu" ))
model.add(Conv2D(48, (5,5), strides=(2,2), activation="relu" ))
model.add(Conv2D(64, (3,3), strides=(2,2), activation="relu" ))
model.add(Flatten())
model.add(Dropout(0.3))
model.add(Dense(100))
model.add(Dropout(0.3))
model.add(Dense(50))
model.add(Dropout(0.2))
model.add(Dense(1))
model.summary()

start=dt.datetime.now()
model.compile(loss='mse', optimizer='Adam')
import time
import keras
class delay(keras.callbacks.Callback):
    def __int__(self,delay_time=600):
        sel.delay_time = 600

    def on_epoch_begin(self,epoch,logs={}):
        if(epoch+1)%100==0:
            print("cooling down to decrease CPU tempereture")
            time.sleep(300)#600 sec
results=model.fit(train_im,train_ang,epochs=1000,batch_size=512,validation_data=(val_im,val_ang),verbose=1,callbacks=[delay()])
print("time took",dt.datetime.now()-start)

model.save("Best_model_One/mymodel_best_model.ckpt")

import pandas as pd
df=pd.DataFrame(results.history)

hist_csv_file = 'Best_model_One/history.csv'
with open(hist_csv_file, mode='w') as f:
    df.to_csv(f)

hist_json_file = 'Best_model_One/history.json'
with open(hist_json_file, mode='w') as f:
    df.to_json(f)

export_excel = df.to_excel (r'Best_model_One/export_dataframe.xlsx', index = None, header=True)

scores = model.evaluate(train_im, train_ang, verbose=1)
print("loss on train data::")
print(scores)
scores = model.evaluate(val_im, val_ang, verbose=1)
print("loss on test data::")
scores

import matplotlib.pyplot as plt




# Plot training & validation loss values
plt.plot(results.history['loss'])
plt.plot(results.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

df

import numpy as np
np.argmin(df["loss"])

np.argmin(np.array(df["loss"]))

df[['loss']].idxmin()

df[df['loss']==df['loss'][828]]

df.info()

df.describe()

df["loss"].mean()

df["val_loss"].mean()

df[["val_loss"]].idxmin()

df[df["val_loss"]==df["val_loss"][487]]



l = df["val_loss"]

l.min()

df[df["val_loss"]==0.15515779092927595]

df["loss"].min()

from keras.models import load_model

model=load_model("Best_model_One/mymodel_best_model.ckpt")

import cv2
img = cv2.imread('steering_wheel_image.jpg',0)
rows,cols = img.shape

smoothed_angle = 0

i = 0
from subprocess import call

while(cv2.waitKey(20) != ord('q')):
    full_image = scipy.misc.imread("driving_dataset/driving_dataset/" + str(i) + ".jpg", mode="RGB")
    image = scipy.misc.imresize(full_image[-150:], [66, 200]) / 255.0
    degrees = model.predict(image[None,...])[0][0] * 180.0 / scipy.pi
    #call("clear")
    print("Predicted steering angle: " + str(degrees) + " degrees")
    cv2.imshow("frame", cv2.cvtColor(full_image, cv2.COLOR_RGB2BGR))
    #make smooth angle transitions by turning the steering wheel based on the difference of the current angle
    #and the predicted angle
    smoothed_angle += 0.2 * pow(abs((degrees - smoothed_angle)), 2.0 / 3.0) * (degrees - smoothed_angle) / abs(degrees - smoothed_angle)
    M = cv2.getRotationMatrix2D((cols/2,rows/2),-smoothed_angle,1)
    dst = cv2.warpAffine(img,M,(cols,rows))
    cv2.imshow("steering wheel", dst)
    i += 1

cv2.destroyAllWindows()

